openapi: 3.0.3
info:
  title: Round-Robin Tournament API
  description: API for managing round-robin tournaments where each player plays every other player exactly once (win/lose only)
  version: 1.1.0
  contact:
    email: support@tournamentapi.com

servers:
  - url: https://api.tournament.core/v1
    description: Core tournament management service
  - url: https://api.player.management/v1
    description: Player account service
  - url: https://api.rating.service/v1
    description: Rating calculation service

paths:
  # Player Service Endpoints
  /new_player:
    post:
      tags: [Player Management]
      summary: Register a new player
      description: Creates a new player account in the system
      servers:
        - url: https://api.player.management/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Magnus Carlsen"
                  minLength: 2
                  maxLength: 100
                email:
                  type: string
                  format: email
                  example: "player@example.com"
                initial_rating:
                  type: number
                  minimum: 100
                  maximum: 3000
                  default: 1000
              required:
                - name
                - email
      responses:
        '201':
          description: Player created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  player_id:
                    type: string
                    format: uuid
                    example: "5e9c5d8a-2f9b-4e8d-8c1a-1e9b8c7d6e5f"
                  rating_service_endpoint:
                    type: string
                    format: uri
                    example: "https://api.rating.service/v1/players/{player_id}"

  # Organizer Service Endpoints
  /new_tournament_organizer:
    post:
      tags: [Organizer Management]
      summary: Register a tournament organizer
      description: Creates a new organizer account
      servers:
        - url: https://api.tournament.core/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organization_name:
                  type: string
                  example: "International  Federation"
                contact_email:
                  type: string
                  format: email
                  example: "contact@fide.com"
                website:
                  type: string
                  format: uri
                  nullable: true
              required:
                - organization_name
                - contact_email
      responses:
        '201':
          description: Organizer created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizer_id:
                    type: string
                    format: uuid
                  api_key:
                    type: string
                    description: "Secret key for authentication"

  # Tournament Service Endpoints
  /new_tournament:
    post:
      tags: [Tournament Management]
      summary: Create a new round-robin tournament
      description: Initializes a tournament with all possible player pairings
      servers:
        - url: https://api.tournament.core/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "World  Championship 2024"
                organizer_id:
                  type: string
                  format: uuid
                player_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  minItems: 2
                  maxItems: 50
                  description: "List of participating player UUIDs"
                start_date:
                  type: string
                  format: date
                rating_system:
                  type: string
                  enum: [elo, glicko]
                  default: "elo"
              required:
                - name
                - organizer_id
                - player_ids
                - start_date
      responses:
        '201':
          description: Tournament created with all pairings
          content:
            application/json:
              schema:
                type: object
                properties:
                  tournament_id:
                    type: string
                    format: uuid
                  total_matches:
                    type: integer
                    example: 45
                    description: "n*(n-1)/2 where n is player count"
                  first_round_matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScheduledMatch'

  # Match Service Endpoints
  /game_result:
    get:
      tags: [Match Management]
      summary: Get match result
      description: Retrieve the outcome of a specific match
      servers:
        - url: https://api.tournament.core/v1
      parameters:
        - name: match_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Match result data
          content:
            application/json:
              schema:
                type: object
                properties:
                  winner_id:
                    type: string
                    format: uuid
                  loser_id:
                    type: string
                    format: uuid
                  match_duration:
                    type: integer
                    description: "Duration in minutes"
                  completed_at:
                    type: string
                    format: date-time

  # Tournament Results Endpoints
  /tournament_result:
    get:
      tags: [Tournament Results]
      summary: Get tournament standings
      description: Returns current rankings based on wins
      servers:
        - url: https://api.tournament.core/v1
      parameters:
        - name: tournament_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tournament standings
          content:
            application/json:
              schema:
                type: object
                properties:
                  tournament_id:
                    type: string
                    format: uuid
                  standings:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlayerStanding'

  # Rating Service Endpoints
  /new_rating:
    post:
      tags: [Rating Management]
      summary: Update player ratings
      description: Recalculates ratings after tournament completion
      servers:
        - url: https://api.rating.service/v1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tournament_id:
                  type: string
                  format: uuid
                k_factor:
                  type: number
                  default: 32
                  description: "Rating adjustment sensitivity"
              required:
                - tournament_id
      responses:
        '200':
          description: Ratings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_players:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatingUpdate'

components:
  schemas:
    ScheduledMatch:
      type: object
      properties:
        match_id:
          type: string
          format: uuid
        player1_id:
          type: string
          format: uuid
        player2_id:
          type: string
          format: uuid
        scheduled_time:
          type: string
          format: date-time
          nullable: true

    PlayerStanding:
      type: object
      properties:
        player_id:
          type: string
          format: uuid
        position:
          type: integer
        wins:
          type: integer
        losses:
          type: integer
        rating:
          type: number
          description: "Current rating"

    RatingUpdate:
      type: object
      properties:
        player_id:
          type: string
          format: uuid
        old_rating:
          type: number
        new_rating:
          type: number
        change:
          type: number

    Error:
      type: object
      properties:
        error_code:
          type: string
          example: "INVALID_PLAYER_COUNT"
        message:
          type: string
          example: "Tournament requires at least 2 players"
        timestamp:
          type: string
          format: date-time